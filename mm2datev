#!/usr/bin/env awk -f
#
# This software is Copyright (c) 2015 by Condition-ALPHA.
#
# This is free software, licensed under:
#
#   The European Union Public License (EUPL) v1.2
#
BEGIN {
    FS=";";
    num_foreign=0;
    fmt_2014=0;
    fmt_2015=0;
    fmt_2017=0;
    fmt_2018=0;
    fmt_2023=0;
}

function unquote(str) {
    return (substr(str, 2, length(str)-2));
}

function enquote(str) {
    return(sprintf("\"%s\"", str));
}

function isodate(str) {
    split(str, date, ".");
    return (sprintf("%04d-%02d-%02d", date[3], date[2], date[1]));
}

###
#   Format detection heuristics
#

# detect old format til end 2014, and used again after 2015 (no AidA
# column)
(NR==4) && match($1, "Rechnung") && ( ! match($3, "A.I.D.A. Transaktion")) {
    fmt_2014=1;
    print "Detected pre/post-2015 file format." >"/dev/stderr";
}

# detect new format 2015 which inserts AidA column as #3 between
# "R.-Datum" and "R.-Pos."
# (NOTE: this format was dropeed again after 2015 END NOTE)
(NR==4) && match($1, "Rechnung") && match($3, "A.I.D.A. Transaktion") {
    fmt_2015=1;
    print "Detected 2015 file format with AidA information." >"/dev/stderr";
}

# detect new format as of July 2017 which inserts a credit card number
# column of the form "123456xxxxxx1234" at the beginning of each line
(NR==4) && match($1, "Kartennummer") && match($2, "Rechnung") {
    fmt_2017=1;
    print "Detected 2017 file format with credit card number column." >"/dev/stderr";
}

# detect new format as of April 2018 (introduced with major system update)
# new features:
#  - new header structure with empty lines
#  - format reduced to eight columns (old formats had 19)
#  - already contains foreign use surcharges as separate transactions
#  - fields are enclosed in double quotes
(NR==1) && match($1, "Kreditkarte:") {
    fmt_2018=1;
    card_number=unquote($2);
    print "Detected 2018 post system update file format." >"/dev/stderr";
}
(fmt_2018==1) && (NR==5) && match($1, "Datum:") {
    invoice_date=isodate(unquote($2));
}

# detect new format as of 2023
# new features:
#  - reduced header structure
#  - new order of columns
#  - fields are unquoted again (cf. 2018 format)
(NR==1) && match($1, "Miles & More") {
    fmt_2023=1;
    card_number=$2;
    print "Detected 2023 website relaunch file format." >"/dev/stderr";
}


###
#   Generate header lines
#

# retain lines that are not transactions (i.e. no transaction ID in
# first column) from pre-2018 formats
(fmt_2023==0) && (fmt_2018==0) && ( ! match($1, "^[0-9]+.*$")) {
    print $0;
}

# for the 2018 file format, generate a legacy header to remain
# compatible with the old MonKey Office import script
(fmt_2018==1) && (NR==7) {
    print "Kartennummer(n);'" card_number "'";
    print "Servicekartennummer(n);";
    print ";;;;"
    print "Rechnung;R.-Datum;R.-Pos.;Kaufdatum;Buch.Datum;Umsatzbeschreibung;;VK-Währung;VK-Betrag;Soll/Haben;Kurs;Abr-Währung;Abgerechnet;Soll/Haben"
}


###
#   Generate transaction lines
#

# format til end 2014, and used again after 2015 (no AidA column)
(fmt_2014==1) && match($1, "^[0-9]+$") {
    # keep the original transaction
    print $0;
    if (NF>14) {
        num_foreign++;
        # if foreign use surcharge incurred, generate a new
        # transaction for the additional fee
        print $1";"$2";"$3";"$4";"$5";Ausl.geb. "$6";"$7";"$17";"$18";S;1;"$17";"$18";S";
    }
}

# format during 2015 (with AidA column)
(fmt_2015==1) && match($1, "^[0-9]+$") {
    # keep the original transaction, but remove AidA column
    print $1";"$2";"$4";"$5";"$6";"$7";"$8";"$9";"$10";"$11";"$12";"$13";"$14";"$15";"$16";"$17";"$18";"$19;
    if (NF>15) {
        num_foreign++;
        # if foreign use surcharge incurred, generate a new
        # transaction for the additional fee
        print $1";"$2";"$4";"$5";"$6";Ausl.geb. "$7";"$8";"$18";"$19";S;1;"$18";"$19";S";
    }
}

# format starting July 2017
(fmt_2017==1) && match($1, "^[0-9]{6}[x]{6}[0-9]{4}$") {
    # keep the original transaction but remove credit card column
    print $2";"$3";"$4";"$5";"$6";"$7";"$8";"$9";"$10";"$11";"$12";"$13";"$14";"$15";"$16";"$17";"$18";"$19;
    if (NF>15) {
        num_foreign++;
        # if foreign use surcharge incurred, generate a new
        # transaction for the additional fee
        print $2";"$3";"$4";"$5";"$6";Ausl.geb. "$7";"$8";"$18";"$19";S;1;"$18";"$19";S";
    }
}

# format starting April 2018
(fmt_2018==1) && (NR>7) {
    if ($3!="\"Lastschrift\"") {
        line_item_number  = NR-7;
        purchase_date     = isodate(unquote($1));
        booked_date       = isodate(unquote($2));
        description_text  = unquote($3);
        debit_or_credit   = (match($4, "^\"-")) ? "S" : "H";
        booked_currency   = "EUR";
        sub("-", "", $4);
        booked_amount     = unquote($4);
        purchase_currency = (match($5, "[A-Z]{3}")) ? substr($5, RSTART, RLENGTH) : "EUR";
        purchase_amount   = (match($5, "[0-9]+,[0-9]{2}")) ? substr($5, RSTART, RLENGTH) : booked_amount;
        exchange_rate     = ($6!="\"\"") ? unquote($6) : "1,00";
        printf "00000000;%s;%d;%s;%s;%s;;%s;%s;%s;%s;%s;%s;%s;;;;\n",
            invoice_date,
            line_item_number,
            purchase_date,
            booked_date,
            description_text,
            purchase_currency,
            purchase_amount,
            debit_or_credit,
            exchange_rate,
            booked_currency,
            booked_amount,
            debit_or_credit;
        num_foreign++;
    }
}

# format starting summer 2023
(fmt_2023==1) && (NR>3) {
    if ($5 != "Lastschrift") {
        gsub("/", ".", $1);
        gsub("/", ".", $2);
        purchase_date     = $1;
        booked_date       = $2;
        booked_amount     = $3;
        booked_currency   = $4;
        # split description text into chunks of 27 chars max
        # text beyond 14 * 27 = 378 chars gets truncated (and thus ignored)
        descr_total_len = length($5);
        if (descr_total_len > 378) {
            print "WARNING: booking text in line " NR " exceeds 378 characters and will be truncated." >"/dev/stderr";
        }
        for (i=0; i<14; i++) {
            descrip[i] = substr($5, i*27, 27);
        }
        payment_type      = ($6!="unknown") ? $6 : "";
        purchase_amount   = ($8 != "") ? $8 : 0.00;
        purchase_currency = $9;
        exchange_rate     = ($10 != "") ? $10 : "";
        # compute index of last field to be filled
        last_field = 7;
        num_descr_segs = int(descr_total_len / 27) + (((descr_total_len % 27) > 0) ? 1 : 0);
        if (num_descr_segs > 0 && num_descr_segs < 5)
            last_field = 11 + num_descr_segs;
        else if (num_descr_segs > 4 && num_descr_segs < 11)
            last_field = 18 + (num_descr_segs - 4);
        else if (num_descr_segs > 10)
            last_field = 30 + (num_descr_segs - 10);
        if (booked_currency != "") last_field = (last_field < 17) ? 17 : last_field;
        if (payment_type != "")    last_field = (last_field < 18) ? 18 : last_field;
        if (purchase_amount != 0)  last_field = (last_field < 26) ? 26 : last_field;

        ###
        # generate output
        #
        printf "%s;%s;%s;%s;%s;%s;%0.02f",
            enquote(""),                #  1    our BIC
            enquote(card_number),       #  2    our IBAN
            enquote(""),                #  3    statement ID
            "",                         #  4    statement date
            booked_date,                #  5    booked date
            purchase_date,              #  6    purchased date
            booked_amount;              #  7    booked amount
        if (last_field >= 12) {
            printf ";%s;%s;%s;%s;%s",
                enquote(""),                #  8    client name 1
                enquote(""),                #  9    client name 2
                enquote(""),                # 10    client BIC
                enquote(""),                # 11    client IBAN
                enquote(descrip[0]);        # 12    description 1
        }
        if (last_field >= 13)
            printf ";%s", enquote(descrip[1]);        # 13    description 2
        if (last_field >= 14)
            printf ";%s", enquote(descrip[2]);        # 14    description 3
        if (last_field >= 15)
            printf ";%s", enquote(descrip[3]);        # 15    description 4
        if (last_field >= 17) {
            printf ";%s;%s",
            enquote(""),                # 16    transaction type code
            enquote(booked_currency);   # 17    booked currency
        }
        if (last_field >= 18)
            printf ";%s", enquote(payment_type);      # 18    booking text
        if (last_field >= 19)
            printf ";%s", enquote(descrip[4]);        # 19    description 5
        if (last_field >= 20)
            printf ";%s", enquote(descrip[5]);        # 20    description 6
        if (last_field >= 21)
            printf ";%s", enquote(descrip[6]);        # 21    description 7
        if (last_field >= 22)
            printf ";%s", enquote(descrip[7]);        # 22    description 8
        if (last_field >= 23)
            printf ";%s", enquote(descrip[8]);        # 23    description 9
        if (last_field >= 24)
            printf ";%s", enquote(descrip[9]);        # 24    description 10
        if (last_field >= 26) {
            if (purchase_amount != 0)
                printf ";%0.02f", purchase_amount;    # 25    purchase amount
            else
                printf ";";
            printf ";%s", enquote(purchase_currency); # 26    purchase currency
        }
        if (last_field >= 31) {
            printf ";%s;%s;%s;%s;%s",
                "",                     # 27    equivalent amount
                enquote(""),            # 28    equivalent amount currency
                "",                     # 29    fee
                enquote(""),            # 30    fee currency
                enquote(descrip[10]);   # 31    description 11
        }
        if (last_field >= 32)
            printf ";%s", enquote(descrip[11]);        # 32    description 12
        if (last_field >= 33)
            printf ";%s", enquote(descrip[12]);        # 33    description 13
        if (last_field >= 34)
            printf ";%s", enquote(descrip[13]);        # 34    description 14
        printf "\r\n";
        num_foreign++;
    }
}

###
#   Success message
#
END {
    if (fmt_2018==0 && fmt_2023==0) {
        # pre-2018 formats
        print "Generated "num_foreign" transactions for foreign use surcharges." >"/dev/stderr";
    } else if (fmt_2018==1) {
        # 2018 format
        print "Converted "num_foreign" transactions to MonKey Office import format." >"/dev/stderr";
    } else {
        # 2023 format
        print "Converted "num_foreign" transactions to DATEV format." >"/dev/stderr";
    }
}
